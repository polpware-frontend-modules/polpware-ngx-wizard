{"version":3,"file":"polpware-ngx-wizard.mjs","sources":["../../../../projects/polpware/ngx-wizard/src/lib/utils/sparse-multi-array.ts","../../../../projects/polpware/ngx-wizard/src/lib/bases/wizard-abstract.component.ts","../../../../projects/polpware/ngx-wizard/src/public-api.ts","../../../../projects/polpware/ngx-wizard/src/polpware-ngx-wizard.ts"],"sourcesContent":["export interface ISparseMultiArray<T> {\r\n    getElement(...numbers: number[]): T;\r\n    setElement(val: T, ...numbers: number[]): void;\r\n}\r\n\r\n\r\nexport class SparseMultiArrayImpl<T> {\r\n\r\n    private readonly _impl: any;\r\n    private readonly _maxDim: number;\r\n    private readonly _factory: () => T;\r\n\r\n    constructor(maxDim: number, ctor: () => T) {\r\n        this._impl = [];\r\n        this._maxDim = maxDim;\r\n        this._factory = ctor;\r\n    }\r\n\r\n    getElement(...numbers: number[]): T {\r\n        const len = this._maxDim > numbers.length ? this._maxDim : numbers.length;\r\n        let data = this._impl;\r\n        for (let i = 0; i < len; i++) {\r\n            const dimIndex = numbers[i] || 0;\r\n            if (data[dimIndex]) {\r\n                data = data[dimIndex];\r\n            } else {\r\n                return this._factory();\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n\r\n    setElement(val: T, ...numbers: number[]) {\r\n        const len = this._maxDim > numbers.length ? this._maxDim : numbers.length;\r\n        let data = this._impl;\r\n        for (let i = 0; i < len - 1; i++) {\r\n            const dimIndex = numbers[i] || 0;\r\n            if (!data[dimIndex]) {\r\n                data[dimIndex] = [];\r\n            }\r\n            data = data[dimIndex];\r\n        }\r\n\r\n        // Unroll the last one\r\n        const lastIndex = numbers[len - 1] || 0;\r\n        data[lastIndex] = val;\r\n    }\r\n}\r\n","import { ISparseMultiArray, SparseMultiArrayImpl } from '../utils/sparse-multi-array';\nimport { INavElementType } from '../interfaces/nav-element-type.interface';\nimport { IHasWizardFeature } from '../interfaces/has-wizard-feature.interface';\n\nexport abstract class WizardAbstractComponent implements IHasWizardFeature {\n\n    // Contract\n    navigatorCfg: ISparseMultiArray<INavElementType>;\n    dimIndice: number[];\n    forwardDimIndice: number[];\n    stepIndex: number;\n\n    // Contract\n    navigator: INavElementType;\n    forwardNavigator: INavElementType;\n\n    /*\n     * Maximum dimension\n     * \n     * This value is determined by the maximum steps for any choice. \n     * Think about this one as the horizontal axis. \n     */\n    maxDim: number;\n\n    // Contract \n    get hasPrevStep() {\n        return this.stepIndex > 0;\n    }\n\n    get hasNextStep() {\n        return this.forwardNavigator.hasNextStep;\n    }\n\n    get disableNextStep() {\n        return this.forwardNavigator.hasNextGuard;\n    }\n\n    /*\n     * Override the method and conduct the following \n     *\n     * \n        this.navigatorCfg.setElement({\n            hasPrevStep: false,\n            hasNextStep: true,\n            hasNextGuard: false,\n            visible: true\n        }, 2);\n\n        this.stepIndex = 0;\n        this.dimIndice = [0, 0, 0, 0];\n        this.forwardDimIndice = [1, 0, 0, 0];\n\n        this.navigator = this.navigatorCfg.getElement(1);\n        this.forwardNavigator = this.navigatorCfg.getElement(...this.forwardDimIndice);\n    */\n    buildNavigatorCfg() {\n        this.navigatorCfg = new SparseMultiArrayImpl(this.maxDim, () => {\n            return {\n                hasPrevStep: false,\n                hasNextStep: false,\n                hasNextGuard: false,\n                visible: false\n            };\n        });\n    }\n\n    visible(...numbers: number[]) {\n\n        let flag = false;\n        for (let i = 0; i < this.maxDim; i++) {\n            const source = numbers[i] || 0;\n            const target = this.dimIndice[i];\n            flag = source === target;\n            if (!flag) {\n                break;\n            }\n        }\n        return flag;\n    }\n\n    protected nextStepInternal() {\n        this.dimIndice = [...this.forwardDimIndice];\n        this.navigator = this.navigatorCfg.getElement(...this.dimIndice);\n\n        this.stepIndex++;\n        // If the next step is not the init step, let's use it directly.\n        if (this.forwardDimIndice[this.stepIndex] === 0) {\n            this.forwardDimIndice[this.stepIndex] = 1;\n        }\n\n        this.forwardNavigator = this.navigatorCfg.getElement(...this.forwardDimIndice);\n    }\n\n    nextStep() {\n        // Guard\n        if (this.disableNextStep) {\n            return;\n        }\n\n        if (this.forwardNavigator.nextStep) {\n            this.forwardNavigator.nextStep();\n        } else {\n            this.nextStepInternal();\n        }\n    }\n\n    prevStep() {\n        if (this.forwardNavigator.prevStep) {\n            this.forwardNavigator.prevStep();\n        } else {\n            this.prevStepInternal();\n        }\n    }\n\n    protected prevStepInternal() {\n        if (this.stepIndex > 0) {\n            // Recover our options \n            this.forwardDimIndice = [...this.dimIndice];\n            this.forwardNavigator = this.navigatorCfg.getElement(...this.forwardDimIndice);\n\n            this.stepIndex--;\n            this.dimIndice[this.stepIndex] = 0;\n\n            this.navigator = this.navigatorCfg.getElement(...this.dimIndice);\n        }\n    }\n}\n","/*\n * Public API Surface of ngx-wizard\n */\n\nexport * from './lib/utils/sparse-multi-array';\n\nexport * from './lib/interfaces/has-wizard-feature.interface';\n\nexport * from './lib/interfaces/nav-element-type.interface';\n\nexport * from './lib/bases/wizard-abstract.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}