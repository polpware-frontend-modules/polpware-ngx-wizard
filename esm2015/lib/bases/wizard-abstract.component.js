import { SparseMultiArrayImpl } from '../utils/sparse-multi-array';
export class WizardAbstractComponent {
    // Contract 
    get hasPrevStep() {
        return this.stepIndex > 0;
    }
    get hasNextStep() {
        return this.forwardNavigator.hasNextStep;
    }
    get disableNextStep() {
        return this.forwardNavigator.hasNextGuard;
    }
    /*
     * Override the method and conduct the following
     *
     *
        this.navigatorCfg.setElement({
            hasPrevStep: false,
            hasNextStep: true,
            hasNextGuard: false,
            visible: true
        }, 2);

        this.stepIndex = 0;
        this.dimIndice = [0, 0, 0, 0];
        this.forwardDimIndice = [1, 0, 0, 0];

        this.navigator = this.navigatorCfg.getElement(1);
        this.forwardNavigator = this.navigatorCfg.getElement(...this.forwardDimIndice);
    */
    buildNavigatorCfg() {
        this.navigatorCfg = new SparseMultiArrayImpl(this.maxDim, () => {
            return {
                hasPrevStep: false,
                hasNextStep: false,
                hasNextGuard: false,
                visible: false
            };
        });
    }
    visible(...numbers) {
        let flag = false;
        for (let i = 0; i < this.maxDim; i++) {
            const source = numbers[i] || 0;
            const target = this.dimIndice[i];
            flag = source === target;
            if (!flag) {
                break;
            }
        }
        return flag;
    }
    nextStepInternal() {
        this.dimIndice = [...this.forwardDimIndice];
        this.navigator = this.navigatorCfg.getElement(...this.dimIndice);
        this.stepIndex++;
        // If the next step is not the init step, let's use it directly.
        if (this.forwardDimIndice[this.stepIndex] === 0) {
            this.forwardDimIndice[this.stepIndex] = 1;
        }
        this.forwardNavigator = this.navigatorCfg.getElement(...this.forwardDimIndice);
    }
    nextStep() {
        // Guard
        if (!this.disableNextStep) {
            return;
        }
        if (this.forwardNavigator.nextStep) {
            this.forwardNavigator.nextStep();
        }
        else {
            this.nextStepInternal();
        }
    }
    prevStep() {
        if (this.stepIndex > 0) {
            // Recover our options 
            this.forwardDimIndice = [...this.dimIndice];
            this.forwardNavigator = this.navigatorCfg.getElement(...this.forwardDimIndice);
            this.stepIndex--;
            this.dimIndice[this.stepIndex] = 0;
            this.navigator = this.navigatorCfg.getElement(...this.dimIndice);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l6YXJkLWFic3RyYWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb2xwd2FyZS9uZ3gtd2l6YXJkLyIsInNvdXJjZXMiOlsibGliL2Jhc2VzL3dpemFyZC1hYnN0cmFjdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFxQixvQkFBb0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBSXRGLE1BQU0sT0FBZ0IsdUJBQXVCO0lBb0J6QyxZQUFZO0lBQ1osSUFBSSxXQUFXO1FBQ1gsT0FBTyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ1gsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDO0lBQzdDLENBQUM7SUFFRCxJQUFJLGVBQWU7UUFDZixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUM7SUFDOUMsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7OztNQWlCRTtJQUNGLGlCQUFpQjtRQUNiLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtZQUMzRCxPQUFPO2dCQUNILFdBQVcsRUFBRSxLQUFLO2dCQUNsQixXQUFXLEVBQUUsS0FBSztnQkFDbEIsWUFBWSxFQUFFLEtBQUs7Z0JBQ25CLE9BQU8sRUFBRSxLQUFLO2FBQ2pCLENBQUM7UUFDTixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxPQUFPLENBQUMsR0FBRyxPQUFpQjtRQUV4QixJQUFJLElBQUksR0FBRyxLQUFLLENBQUM7UUFDakIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbEMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMvQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLElBQUksR0FBRyxNQUFNLEtBQUssTUFBTSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1AsTUFBTTthQUNUO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRVMsZ0JBQWdCO1FBQ3RCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFakUsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2pCLGdFQUFnRTtRQUNoRSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzdDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzdDO1FBRUQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDbkYsQ0FBQztJQUVELFFBQVE7UUFDSixRQUFRO1FBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDdkIsT0FBTztTQUNWO1FBRUQsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNwQzthQUFNO1lBQ0gsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7U0FDM0I7SUFDTCxDQUFDO0lBRUQsUUFBUTtRQUNKLElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLEVBQUU7WUFDcEIsdUJBQXVCO1lBQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzVDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBRS9FLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNwRTtJQUNMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElTcGFyc2VNdWx0aUFycmF5LCBTcGFyc2VNdWx0aUFycmF5SW1wbCB9IGZyb20gJy4uL3V0aWxzL3NwYXJzZS1tdWx0aS1hcnJheSc7XG5pbXBvcnQgeyBJTmF2RWxlbWVudFR5cGUgfSBmcm9tICcuLi9pbnRlcmZhY2VzL25hdi1lbGVtZW50LXR5cGUuaW50ZXJmYWNlJztcbmltcG9ydCB7IElIYXNXaXphcmRGZWF0dXJlIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9oYXMtd2l6YXJkLWZlYXR1cmUuaW50ZXJmYWNlJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFdpemFyZEFic3RyYWN0Q29tcG9uZW50IGltcGxlbWVudHMgSUhhc1dpemFyZEZlYXR1cmUge1xuXG4gICAgLy8gQ29udHJhY3RcbiAgICBuYXZpZ2F0b3JDZmc6IElTcGFyc2VNdWx0aUFycmF5PElOYXZFbGVtZW50VHlwZT47XG4gICAgZGltSW5kaWNlOiBudW1iZXJbXTtcbiAgICBmb3J3YXJkRGltSW5kaWNlOiBudW1iZXJbXTtcbiAgICBzdGVwSW5kZXg6IG51bWJlcjtcblxuICAgIC8vIENvbnRyYWN0XG4gICAgbmF2aWdhdG9yOiBJTmF2RWxlbWVudFR5cGU7XG4gICAgZm9yd2FyZE5hdmlnYXRvcjogSU5hdkVsZW1lbnRUeXBlO1xuXG4gICAgLypcbiAgICAgKiBNYXhpbXVtIGRpbWVuc2lvblxuICAgICAqIFxuICAgICAqIFRoaXMgdmFsdWUgaXMgZGV0ZXJtaW5lZCBieSB0aGUgbWF4aW11bSBzdGVwcyBmb3IgYW55IGNob2ljZS4gXG4gICAgICogVGhpbmsgYWJvdXQgdGhpcyBvbmUgYXMgdGhlIGhvcml6b250YWwgYXhpcy4gXG4gICAgICovXG4gICAgbWF4RGltOiBudW1iZXI7XG5cbiAgICAvLyBDb250cmFjdCBcbiAgICBnZXQgaGFzUHJldlN0ZXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0ZXBJbmRleCA+IDA7XG4gICAgfVxuXG4gICAgZ2V0IGhhc05leHRTdGVwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3J3YXJkTmF2aWdhdG9yLmhhc05leHRTdGVwO1xuICAgIH1cblxuICAgIGdldCBkaXNhYmxlTmV4dFN0ZXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcndhcmROYXZpZ2F0b3IuaGFzTmV4dEd1YXJkO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogT3ZlcnJpZGUgdGhlIG1ldGhvZCBhbmQgY29uZHVjdCB0aGUgZm9sbG93aW5nIFxuICAgICAqXG4gICAgICogXG4gICAgICAgIHRoaXMubmF2aWdhdG9yQ2ZnLnNldEVsZW1lbnQoe1xuICAgICAgICAgICAgaGFzUHJldlN0ZXA6IGZhbHNlLFxuICAgICAgICAgICAgaGFzTmV4dFN0ZXA6IHRydWUsXG4gICAgICAgICAgICBoYXNOZXh0R3VhcmQ6IGZhbHNlLFxuICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgICAgICB9LCAyKTtcblxuICAgICAgICB0aGlzLnN0ZXBJbmRleCA9IDA7XG4gICAgICAgIHRoaXMuZGltSW5kaWNlID0gWzAsIDAsIDAsIDBdO1xuICAgICAgICB0aGlzLmZvcndhcmREaW1JbmRpY2UgPSBbMSwgMCwgMCwgMF07XG5cbiAgICAgICAgdGhpcy5uYXZpZ2F0b3IgPSB0aGlzLm5hdmlnYXRvckNmZy5nZXRFbGVtZW50KDEpO1xuICAgICAgICB0aGlzLmZvcndhcmROYXZpZ2F0b3IgPSB0aGlzLm5hdmlnYXRvckNmZy5nZXRFbGVtZW50KC4uLnRoaXMuZm9yd2FyZERpbUluZGljZSk7XG4gICAgKi9cbiAgICBidWlsZE5hdmlnYXRvckNmZygpIHtcbiAgICAgICAgdGhpcy5uYXZpZ2F0b3JDZmcgPSBuZXcgU3BhcnNlTXVsdGlBcnJheUltcGwodGhpcy5tYXhEaW0sICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaGFzUHJldlN0ZXA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGhhc05leHRTdGVwOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBoYXNOZXh0R3VhcmQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2aXNpYmxlKC4uLm51bWJlcnM6IG51bWJlcltdKSB7XG5cbiAgICAgICAgbGV0IGZsYWcgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1heERpbTsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBudW1iZXJzW2ldIHx8IDA7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLmRpbUluZGljZVtpXTtcbiAgICAgICAgICAgIGZsYWcgPSBzb3VyY2UgPT09IHRhcmdldDtcbiAgICAgICAgICAgIGlmICghZmxhZykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbGFnO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBuZXh0U3RlcEludGVybmFsKCkge1xuICAgICAgICB0aGlzLmRpbUluZGljZSA9IFsuLi50aGlzLmZvcndhcmREaW1JbmRpY2VdO1xuICAgICAgICB0aGlzLm5hdmlnYXRvciA9IHRoaXMubmF2aWdhdG9yQ2ZnLmdldEVsZW1lbnQoLi4udGhpcy5kaW1JbmRpY2UpO1xuXG4gICAgICAgIHRoaXMuc3RlcEluZGV4Kys7XG4gICAgICAgIC8vIElmIHRoZSBuZXh0IHN0ZXAgaXMgbm90IHRoZSBpbml0IHN0ZXAsIGxldCdzIHVzZSBpdCBkaXJlY3RseS5cbiAgICAgICAgaWYgKHRoaXMuZm9yd2FyZERpbUluZGljZVt0aGlzLnN0ZXBJbmRleF0gPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZm9yd2FyZERpbUluZGljZVt0aGlzLnN0ZXBJbmRleF0gPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5mb3J3YXJkTmF2aWdhdG9yID0gdGhpcy5uYXZpZ2F0b3JDZmcuZ2V0RWxlbWVudCguLi50aGlzLmZvcndhcmREaW1JbmRpY2UpO1xuICAgIH1cblxuICAgIG5leHRTdGVwKCkge1xuICAgICAgICAvLyBHdWFyZFxuICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZU5leHRTdGVwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5mb3J3YXJkTmF2aWdhdG9yLm5leHRTdGVwKSB7XG4gICAgICAgICAgICB0aGlzLmZvcndhcmROYXZpZ2F0b3IubmV4dFN0ZXAoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubmV4dFN0ZXBJbnRlcm5hbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJldlN0ZXAoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0ZXBJbmRleCA+IDApIHtcbiAgICAgICAgICAgIC8vIFJlY292ZXIgb3VyIG9wdGlvbnMgXG4gICAgICAgICAgICB0aGlzLmZvcndhcmREaW1JbmRpY2UgPSBbLi4udGhpcy5kaW1JbmRpY2VdO1xuICAgICAgICAgICAgdGhpcy5mb3J3YXJkTmF2aWdhdG9yID0gdGhpcy5uYXZpZ2F0b3JDZmcuZ2V0RWxlbWVudCguLi50aGlzLmZvcndhcmREaW1JbmRpY2UpO1xuXG4gICAgICAgICAgICB0aGlzLnN0ZXBJbmRleC0tO1xuICAgICAgICAgICAgdGhpcy5kaW1JbmRpY2VbdGhpcy5zdGVwSW5kZXhdID0gMDtcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdG9yID0gdGhpcy5uYXZpZ2F0b3JDZmcuZ2V0RWxlbWVudCguLi50aGlzLmRpbUluZGljZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=