export class SparseMultiArrayImpl {
    constructor(maxDim, ctor) {
        this._impl = [];
        this._maxDim = maxDim;
        this._factory = ctor;
    }
    getElement(...numbers) {
        const len = this._maxDim > numbers.length ? this._maxDim : numbers.length;
        let data = this._impl;
        for (let i = 0; i < len; i++) {
            const dimIndex = numbers[i] || 0;
            if (data[dimIndex]) {
                data = data[dimIndex];
            }
            else {
                return this._factory();
            }
        }
        return data;
    }
    setElement(val, ...numbers) {
        const len = this._maxDim > numbers.length ? this._maxDim : numbers.length;
        let data = this._impl;
        for (let i = 0; i < len - 1; i++) {
            const dimIndex = numbers[i] || 0;
            if (!data[dimIndex]) {
                data[dimIndex] = [];
            }
            data = data[dimIndex];
        }
        // Unroll the last one
        const lastIndex = numbers[len - 1] || 0;
        data[lastIndex] = val;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BhcnNlLW11bHRpLWFycmF5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcG9scHdhcmUvbmd4LXdpemFyZC9zcmMvbGliL3V0aWxzL3NwYXJzZS1tdWx0aS1hcnJheS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxNQUFNLE9BQU8sb0JBQW9CO0lBTTdCLFlBQVksTUFBYyxFQUFFLElBQWE7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUVELFVBQVUsQ0FBQyxHQUFHLE9BQWlCO1FBQzNCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUMxRSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3RCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDMUIsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDaEIsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUN6QjtpQkFBTTtnQkFDSCxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUMxQjtTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELFVBQVUsQ0FBQyxHQUFNLEVBQUUsR0FBRyxPQUFpQjtRQUNuQyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDMUUsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN0QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM5QixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7YUFDdkI7WUFDRCxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3pCO1FBRUQsc0JBQXNCO1FBQ3RCLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDMUIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBJU3BhcnNlTXVsdGlBcnJheTxUPiB7XHJcbiAgICBnZXRFbGVtZW50KC4uLm51bWJlcnM6IG51bWJlcltdKTogVDtcclxuICAgIHNldEVsZW1lbnQodmFsOiBULCAuLi5udW1iZXJzOiBudW1iZXJbXSk6IHZvaWQ7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgU3BhcnNlTXVsdGlBcnJheUltcGw8VD4ge1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2ltcGw6IGFueTtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX21heERpbTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZmFjdG9yeTogKCkgPT4gVDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihtYXhEaW06IG51bWJlciwgY3RvcjogKCkgPT4gVCkge1xyXG4gICAgICAgIHRoaXMuX2ltcGwgPSBbXTtcclxuICAgICAgICB0aGlzLl9tYXhEaW0gPSBtYXhEaW07XHJcbiAgICAgICAgdGhpcy5fZmFjdG9yeSA9IGN0b3I7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RWxlbWVudCguLi5udW1iZXJzOiBudW1iZXJbXSk6IFQge1xyXG4gICAgICAgIGNvbnN0IGxlbiA9IHRoaXMuX21heERpbSA+IG51bWJlcnMubGVuZ3RoID8gdGhpcy5fbWF4RGltIDogbnVtYmVycy5sZW5ndGg7XHJcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLl9pbXBsO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZGltSW5kZXggPSBudW1iZXJzW2ldIHx8IDA7XHJcbiAgICAgICAgICAgIGlmIChkYXRhW2RpbUluZGV4XSkge1xyXG4gICAgICAgICAgICAgICAgZGF0YSA9IGRhdGFbZGltSW5kZXhdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZhY3RvcnkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRFbGVtZW50KHZhbDogVCwgLi4ubnVtYmVyczogbnVtYmVyW10pIHtcclxuICAgICAgICBjb25zdCBsZW4gPSB0aGlzLl9tYXhEaW0gPiBudW1iZXJzLmxlbmd0aCA/IHRoaXMuX21heERpbSA6IG51bWJlcnMubGVuZ3RoO1xyXG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5faW1wbDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbiAtIDE7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBkaW1JbmRleCA9IG51bWJlcnNbaV0gfHwgMDtcclxuICAgICAgICAgICAgaWYgKCFkYXRhW2RpbUluZGV4XSkge1xyXG4gICAgICAgICAgICAgICAgZGF0YVtkaW1JbmRleF0gPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkYXRhID0gZGF0YVtkaW1JbmRleF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBVbnJvbGwgdGhlIGxhc3Qgb25lXHJcbiAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gbnVtYmVyc1tsZW4gLSAxXSB8fCAwO1xyXG4gICAgICAgIGRhdGFbbGFzdEluZGV4XSA9IHZhbDtcclxuICAgIH1cclxufVxyXG4iXX0=